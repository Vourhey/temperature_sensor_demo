#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# ROS
import rospy
from std_msgs.msg import String
from std_srvs.srv import Empty

# AIRA
from robonomics_msgs.msg import Demand, Result
from ethereum_common.msg import Address, UInt256
from ethereum_common.srv import Accounts, BlockNumber
from ipfs_common.msg import Multihash


class WorkerNode:
    def __init__(self):
        rospy.init_node('worker')
        rospy.loginfo('Launching worker node...')

        rospy.Subscriber('/liability/infochan/incoming/demand', Demand, self.on_incoming_demand)

        self.result_publish = rospy.Publisher('/liability/infochan/eth/signing/result', Result, queue_size=128)

        rospy.loginfo('Worker node launched.')

    def on_incoming_demand(self, msg: Demand):
        rospy.loginfo('Incoming demand %s...', str(msg))
        if (msg.model.multihash == rospy.get_param('~model') and msg.sender.address == rospy.get_param('~account')):
            self.send_result(msg)

    def get_temperature(self) -> Multihash:
        ipfsclient = connect()


    def send_result(self, msg: Demand):
        rospy.loginfo('Starting process...')

        res = Result()
        res.liability = msg.sender
        res.result = "" # TODO temperature
        res.success = True

        self.result_publish.publish(res)

    def spin(self):
        rospy.spin()

if __name__ == '__main__':
    WorkerNode().spin()

