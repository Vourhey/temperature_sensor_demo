#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Standard
import glob
import time
import json
from tempfile import NamedTemporaryFile

# ROS
import rospy
from rosbag import Bag
from std_msgs.msg import String
from std_srvs.srv import Empty

# AIRA
from robonomics_msgs.msg import Demand, Result
from ipfs_common.msg import Multihash
from ipfsapi import connect

class WorkerNode:
    def __init__(self):
        rospy.init_node('worker')
        rospy.loginfo('Launching worker node...')

        rospy.Subscriber('/liability/infochan/incoming/demand', Demand, self.on_incoming_demand)

        self.result_publish = rospy.Publisher('/liability/infochan/eth/signing/result', Result, queue_size=128)

        self.NO_SENSOR = True if rospy.get_param("~no_sensor") == "true" else False

        rospy.loginfo('Worker node launched.')

    def on_incoming_demand(self, msg: Demand):
        rospy.loginfo('Incoming demand %s...', str(msg))
        if (msg.model.multihash == rospy.get_param('~model') and msg.sender.address == rospy.get_param('~account')):
            self.send_result(msg)

    def get_temperature(self) -> Multihash:
        rospy.loginfo("Getting the temerature...")
        ipfsclient = connect()

        temp_log = NamedTemporaryFile(delete=False)
        bag = Bag(temp_log.name, 'w')

        if self.NO_SENSOR:

            res_str = {
                'temp_c': 21.0,
                'temp_f': 69.8
            }
            rospy.loginfo("Current temerature is {}".format(res_str))

            bag.write('/data', String(json.dumps(res_str)))
            bag.close()
            res_hash = ipfsclient.add(temp_log.name)
            return Multihash(res_hash['Hash'])

        base_dir = '/sys/bus/w1/devices/'
        device_folder = glob.glob(base_dir + '28*')[0]
        device_file = device_folder + '/w1_slave'

        def read_temp_raw():
            f = open(device_file, 'r')
            lines = f.readlines()
            f.close()
            return lines

        lines = read_temp_raw()
        while lines[0].strip()[-3:] != 'YES':
            time.sleep(0.2)
            lines = read_temp_raw()
        equals_pos = lines[1].find('t=')
        if equals_pos != -1:
            temp_string = lines[1][equals_pos+2:]
            temp_c = float(temp_string) / 1000.0
            temp_f = temp_c * 9.0 / 5.0 + 32.0

            res_str = {
                'temp_c': temp_c,
                'temp_f': temp_f
            }
            rospy.loginfo("Current temerature is {}".format(res_str))

            bag.write('/data', String(json.dumps(res_str)))
            bag.close()
            res_hash = ipfsclient.add(temp_log.name)
            return Multihash(res_hash['Hash'])

        return Multihash("")

    def send_result(self, msg: Demand):
        rospy.loginfo('Starting process...')

        res = Result()
        res.liability = msg.sender
        res.result = self.get_temperature()
        res.success = True

        rospy.loginfo(res)

        self.result_publish.publish(res)

    def spin(self):
        rospy.spin()

if __name__ == '__main__':
    WorkerNode().spin()

